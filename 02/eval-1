#!/usr/bin/env python3

from collections import Counter
from dataclasses import dataclass
import sys

@dataclass
class Game:
    number: int
    samples: list

def subtract(reference, counts):
    tmp = Counter(reference)
    tmp.subtract(counts)
    return tmp

def possible(game, setup):
    return not any(any(c < 0 for c in subtract(setup, sample).values()) for sample in game.samples)

def count(input):
    n, label = input.split(' ')
    return (label, int(n))

def counts(input):
    return Counter(dict(count(part) for part in input.split(', ')))

def parse(input):
    num, outcomes = input.removeprefix('Game ').split(': ')
    samples = [counts(part) for part in outcomes.split('; ')]
    return Game(int(num), samples)

if __name__ == '__main__':
    setup = Counter({'red': 12, 'green': 13, 'blue': 14})
    games = [parse(line.rstrip()) for line in sys.stdin]
    print(sum(game.number for game in games if possible(game, setup)))
